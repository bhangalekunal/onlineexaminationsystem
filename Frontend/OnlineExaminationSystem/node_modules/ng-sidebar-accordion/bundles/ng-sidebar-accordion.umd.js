(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ng-sidebar-accordion', ['exports', '@angular/core', '@angular/common'], factory) :
    (global = global || self, factory(global['ng-sidebar-accordion'] = {}, global.ng.core, global.ng.common));
}(this, (function (exports, core, common) { 'use strict';

    var SidebarSettingsComponent = /** @class */ (function () {
        function SidebarSettingsComponent() {
            this.modeChange = new core.EventEmitter();
            this.positionChange = new core.EventEmitter();
        }
        Object.defineProperty(SidebarSettingsComponent.prototype, "position", {
            get: function () {
                return this._position;
            },
            set: function (value) {
                this._position = value;
                this.positionChange.emit(this);
            },
            enumerable: false,
            configurable: true
        });
        ;
        Object.defineProperty(SidebarSettingsComponent.prototype, "mode", {
            get: function () {
                return this._mode;
            },
            set: function (value) {
                this._mode = value;
                this.modeChange.emit(this);
            },
            enumerable: false,
            configurable: true
        });
        return SidebarSettingsComponent;
    }());
    SidebarSettingsComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'ng-sidebar-settings',
                    template: '',
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] }
    ];
    SidebarSettingsComponent.propDecorators = {
        modeChange: [{ type: core.Output }],
        positionChange: [{ type: core.Output }],
        position: [{ type: core.Input }],
        mode: [{ type: core.Input }]
    };

    var SidebarAccordionComponent = /** @class */ (function () {
        function SidebarAccordionComponent(element, cdRef) {
            var _this = this;
            this.element = element;
            this.cdRef = cdRef;
            this.classNameSidebarAccordion = true;
            this.sidebarResizableBegin = new core.EventEmitter();
            this.sidebarResizableEnd = new core.EventEmitter();
            this.sidebarOpenedChange = new core.EventEmitter();
            this._sidebars = [];
            this.onMouseMove = function (e) {
                if (!_this._resizeSidebar) {
                    return;
                }
                var root = document.documentElement;
                var getDiffPositionValue = function () {
                    switch (_this._resizeSidebar.position) {
                        case 'left':
                            return e.clientX - _this._resizeSidebar.mouseClientX;
                        case 'right':
                            return (e.clientX - _this._resizeSidebar.mouseClientX) * -1;
                        case 'top':
                            return e.clientY - _this._resizeSidebar.mouseClientY;
                        case 'bottom':
                            return (e.clientY - _this._resizeSidebar.mouseClientY) * -1;
                        default:
                            return 0;
                    }
                };
                var positionValue = getDiffPositionValue() + _this._resizeSidebar.spaceContent;
                if (positionValue < 0) {
                    positionValue = 0;
                }
                root.style.setProperty("--ng-sidebar-accordion-space__sidebar-content-" + _this._resizeSidebar.position, positionValue + 'px');
                _this.correctMaxSizeSidebars();
            };
            this.onMouseUp = function () {
                if (_this._resizeSidebar) {
                    var position = _this._resizeSidebar.position;
                    delete _this._resizeSidebar;
                    _this.sidebarResizableEnd.emit(position);
                }
            };
            this.groupBy = function (xs, key) {
                return xs.reduce(function (rv, x) {
                    (rv[x[key]] = rv[x[key]] || []).push(x);
                    return rv;
                }, {});
            };
        }
        SidebarAccordionComponent.prototype.ngAfterViewInit = function () {
            var groupSettings = this.groupBy(this.sideBarSettingsList.toArray(), 'position');
            Object.keys(groupSettings)
                .forEach(function (key) {
                if (groupSettings[key].length > 1) {
                    throw new Error('<ng-sidebar-settings> ng-sidebar-settings can\'t be more than one with the same position.');
                }
            });
            this.sidebarSettingsSubscribe();
        };
        SidebarAccordionComponent.prototype.ngOnInit = function () {
            window.addEventListener('mousemove', this.onMouseMove);
            window.addEventListener('mouseup', this.onMouseUp);
        };
        SidebarAccordionComponent.prototype.ngOnDestroy = function () {
            window.removeEventListener('mousemove', this.onMouseMove);
            window.removeEventListener('mouseup', this.onMouseUp);
            this.sidebarUnsubscribe();
            this.sidebarSettingsUnsubscribe();
        };
        SidebarAccordionComponent.prototype._addSidebar = function (sidebar) {
            this._sidebars.push(sidebar);
            this.sidebarSubscribe(sidebar);
        };
        SidebarAccordionComponent.prototype._removeSidebar = function (sidebar) {
            var index = this._sidebars.indexOf(sidebar);
            if (index !== -1) {
                this._sidebars.splice(index, 1);
            }
        };
        SidebarAccordionComponent.prototype._isResizableGutter = function (position) {
            if (!position || !this.sidebarResizable) {
                return false;
            }
            var groupByPosition = this.groupBy(this._sidebars, 'position');
            if (groupByPosition.hasOwnProperty(position)) {
                return !!groupByPosition[position].find(function (s) { return s.opened; });
            }
            return false;
        };
        SidebarAccordionComponent.prototype._getClassName = function (position) {
            var sideBarSettings = this.sideBarSettingsList.filter(function (s) { return s.position === position; });
            return "ng-sidebar-accordion__" + position + "-pane" + (this._resizeSidebar && this._resizeSidebar.position === position
                ?
                    " ng-sidebar-accordion__" + position + "-pane_resizable"
                : '') + (sideBarSettings.length > 0 && sideBarSettings[0].mode === 'over'
                ? " ng-sidebar-accordion__" + position + "-pane_over"
                : '');
        };
        SidebarAccordionComponent.prototype._getStyle = function (position) {
            var root = document.documentElement;
            var spaceSidebarHeader = +getComputedStyle(root)
                .getPropertyValue("--ng-sidebar-accordion-space__sidebar-header")
                .replace('px', '');
            var spaceSidebarHeaderBorder = +getComputedStyle(root)
                .getPropertyValue("--ng-sidebar-accordion-space__sidebar-header-border")
                .replace('px', '');
            var leftPaneIsOver = this.sideBarSettingsList.filter(function (s) { return s.position === 'left' && s.mode === 'over'; }).length > 0;
            var topPaneIsOver = this.sideBarSettingsList.filter(function (s) { return s.position === 'top' && s.mode === 'over'; }).length > 0;
            var rightPaneIsOver = this.sideBarSettingsList.filter(function (s) { return s.position === 'right' && s.mode === 'over'; }).length > 0;
            var bottomPaneIsOver = this.sideBarSettingsList.filter(function (s) { return s.position === 'bottom' && s.mode === 'over'; }).length > 0;
            var leftSidebarCount = this._sidebars.filter(function (s) { return s.position === 'left' && s._headersLength > 0; }).length;
            var topSidebarCount = this._sidebars.filter(function (s) { return s.position === 'top' && s._headersLength > 0; }).length;
            var rightSidebarCount = this._sidebars.filter(function (s) { return s.position === 'right' && s._headersLength > 0; }).length;
            var bottomSidebarCount = this._sidebars.filter(function (s) { return s.position === 'bottom' && s._headersLength > 0; }).length;
            var style = {};
            switch (position) {
                case 'top':
                case 'bottom':
                    var currentPaneIsOver = this.sideBarSettingsList.filter(function (s) { return s.position === position && s.mode === 'over'; }).length > 0;
                    if (currentPaneIsOver) {
                        if (leftPaneIsOver) {
                            style.left = leftSidebarCount * spaceSidebarHeader + spaceSidebarHeaderBorder + 'px';
                        }
                        else {
                            style.left = '0';
                        }
                        if (rightPaneIsOver) {
                            style.right = rightSidebarCount * spaceSidebarHeader + spaceSidebarHeaderBorder + 'px';
                        }
                        else {
                            style.right = '0';
                        }
                        return style;
                    }
                    else {
                        if (leftPaneIsOver) {
                            style.paddingLeft = leftSidebarCount * spaceSidebarHeader + spaceSidebarHeaderBorder + 'px';
                        }
                        if (rightPaneIsOver) {
                            style.paddingRight = rightSidebarCount * spaceSidebarHeader + spaceSidebarHeaderBorder + 'px';
                        }
                        return style;
                    }
                case undefined:
                case null:
                    if (leftPaneIsOver) {
                        style.paddingLeft = leftSidebarCount * spaceSidebarHeader + spaceSidebarHeaderBorder + 'px';
                    }
                    if (topPaneIsOver) {
                        style.paddingTop = topSidebarCount * spaceSidebarHeader + spaceSidebarHeaderBorder + 'px';
                    }
                    if (rightPaneIsOver) {
                        style.paddingRight = rightSidebarCount * spaceSidebarHeader + spaceSidebarHeaderBorder + 'px';
                    }
                    if (bottomPaneIsOver) {
                        style.paddingBottom = bottomSidebarCount * spaceSidebarHeader + spaceSidebarHeaderBorder + 'px';
                    }
                    return style;
                default:
                    return null;
            }
        };
        SidebarAccordionComponent.prototype._onSidebarResizeBegin = function (position, e) {
            var root = document.documentElement;
            this._resizeSidebar = {
                position: position,
                mouseClientX: e.clientX,
                mouseClientY: e.clientY,
                spaceContent: +getComputedStyle(root)
                    .getPropertyValue("--ng-sidebar-accordion-space__sidebar-content-" + position)
                    .replace('px', '')
            };
            this.sidebarResizableBegin.emit(position);
        };
        SidebarAccordionComponent.prototype.open = function (value, index) {
            if (index === void 0) { index = 0; }
            this.sidebarToggle(value, index, true);
        };
        SidebarAccordionComponent.prototype.close = function (value) {
            this.sidebarToggle(value, null, false);
        };
        SidebarAccordionComponent.prototype.getSidebarIndex = function (sidebar) {
            if (!sidebar) {
                return -1;
            }
            var groupByPosition = this.groupBy(this._sidebars, 'position');
            if (groupByPosition.hasOwnProperty('left')) {
                groupByPosition['left'].reverse();
            }
            if (groupByPosition.hasOwnProperty('top')) {
                groupByPosition['top'].reverse();
            }
            if (groupByPosition.hasOwnProperty(sidebar.position)) {
                return groupByPosition[sidebar.position].findIndex(function (s) { return s === sidebar; });
            }
            return -1;
        };
        SidebarAccordionComponent.prototype.sidebarToggle = function (position, index, opened) {
            var groupByPosition = this.groupBy(this._sidebars, 'position');
            if (groupByPosition.hasOwnProperty('left')) {
                groupByPosition['left'].reverse();
            }
            if (groupByPosition.hasOwnProperty('top')) {
                groupByPosition['top'].reverse();
            }
            switch (position) {
                case 'all':
                    Object.keys(groupByPosition).forEach(function (key) {
                        opened
                            ? groupByPosition[key][index].open()
                            : index
                                ? groupByPosition[key][index].close()
                                : groupByPosition[key].forEach(function (s) { return s.close(); });
                    });
                    break;
                default:
                    opened
                        ? groupByPosition[position][index].open()
                        : index
                            ? groupByPosition[position][index].close()
                            : groupByPosition[position].forEach(function (s) { return s.close(); });
                    break;
            }
        };
        SidebarAccordionComponent.prototype.correctMaxSizeSidebars = function () {
            var _this = this;
            var setSpaceSidebar = function (openedSidebars, outOfScreenSize) {
                openedSidebars.forEach(function (s) {
                    var spaceSidebar = +getComputedStyle(root)
                        .getPropertyValue("--ng-sidebar-accordion-space__sidebar-content-" + s.position)
                        .replace('px', '');
                    if (spaceSidebar < 0) {
                        spaceSidebar *= -1;
                    }
                    var spaceValue = spaceSidebar - outOfScreenSize;
                    if (spaceValue < 0) {
                        spaceValue = 0;
                    }
                    root.style.setProperty("--ng-sidebar-accordion-space__sidebar-content-" + s.position, spaceValue + 'px');
                });
            };
            var root = document.documentElement;
            var spaceSidebarHeaderBorder = +getComputedStyle(root)
                .getPropertyValue("--ng-sidebar-accordion-space__sidebar-header-border")
                .replace('px', '');
            var outOfScreenWidth = this.element.nativeElement.scrollWidth - (this.element.nativeElement.clientWidth + spaceSidebarHeaderBorder);
            var outOfScreenHeight = this.element.nativeElement.scrollHeight - (this.element.nativeElement.clientHeight + spaceSidebarHeaderBorder);
            if (outOfScreenWidth > 0) {
                var openedSidebarsW = this._sidebars
                    .filter(function (s) { return (s.position === 'left' || s.position === 'right') && s.opened
                    && !_this.sideBarSettingsList.find(function (ss) { return ss.position === s.position && ss.mode === 'over'; }); });
                setSpaceSidebar(openedSidebarsW, outOfScreenWidth);
            }
            if (outOfScreenHeight > 0) {
                var openedSidebarsH = this._sidebars
                    .filter(function (s) { return (s.position === 'top' || s.position === 'bottom') && s.opened
                    && !_this.sideBarSettingsList.find(function (ss) { return ss.position === s.position && ss.mode === 'over'; }); });
                setSpaceSidebar(openedSidebarsH, outOfScreenHeight);
            }
        };
        SidebarAccordionComponent.prototype.sidebarSubscribe = function (sidebar) {
            var _this = this;
            sidebar.headerClicked.subscribe(function (e) {
                e.opened ? e.close() : e.open();
            });
            sidebar.headerTouchMoved.subscribe(function (e) {
                var isAllowResizable = _this._sidebars
                    .filter(function (s) { return s.position === e.sender.position && s.opened; }).length > 0;
                if (_this.sidebarResizable && isAllowResizable) {
                    var groupByPosition = _this.groupBy(_this._sidebars, 'position');
                    if (groupByPosition.hasOwnProperty('left')) {
                        groupByPosition['left'].reverse();
                    }
                    if (groupByPosition.hasOwnProperty('top')) {
                        groupByPosition['top'].reverse();
                    }
                    // move only first sidebar
                    if (e.sender === groupByPosition[e.sender.position][0]) {
                        if (!_this._resizeSidebar) {
                            _this._onSidebarResizeBegin(e.sender.position, {
                                clientX: e.originalEvent.touches[0].clientX,
                                clientY: e.originalEvent.touches[0].clientY
                            });
                        }
                        else {
                            _this.onMouseMove({
                                clientX: e.originalEvent.touches[0].clientX,
                                clientY: e.originalEvent.touches[0].clientY
                            });
                        }
                    }
                }
            });
            sidebar.headerTouchEnded.subscribe(function (e) {
                if (_this._resizeSidebar) {
                    _this.onMouseUp();
                }
                else {
                    e.sender.opened ? e.sender.close() : e.sender.open();
                }
            });
            sidebar.openedChange.subscribe(function (e) {
                if (e.opened) {
                    _this._sidebars.filter(function (s) { return s.opened && s != e.sender &&
                        s.position === e.sender.position; }).forEach(function (s) { return s.close(); });
                }
                _this.cdRef.markForCheck();
                var root = document.documentElement;
                var animationDuration = +getComputedStyle(root)
                    .getPropertyValue("--ng-sidebar-accordion-animation-duration")
                    .replace('s', '');
                setTimeout(function () { return _this.correctMaxSizeSidebars(); }, 1000 * animationDuration);
                _this.sidebarOpenedChange.emit(e.sender);
            });
        };
        SidebarAccordionComponent.prototype.sidebarUnsubscribe = function () {
            this._sidebars.forEach(function (sidebar) {
                sidebar.headerClicked.unsubscribe();
                sidebar.openedChange.unsubscribe();
                sidebar.headerTouchMoved.unsubscribe();
                sidebar.headerTouchEnded.unsubscribe();
            });
        };
        SidebarAccordionComponent.prototype.sidebarSettingsSubscribe = function () {
            var _this = this;
            this.sideBarSettingsList.forEach(function (s) {
                s.modeChange.subscribe(function () {
                    _this.cdRef.markForCheck();
                });
                s.positionChange.subscribe(function () {
                    _this.cdRef.markForCheck();
                });
            });
        };
        SidebarAccordionComponent.prototype.sidebarSettingsUnsubscribe = function () {
            this.sideBarSettingsList.forEach(function (s) {
                s.modeChange.unsubscribe();
                s.positionChange.unsubscribe();
            });
        };
        return SidebarAccordionComponent;
    }());
    SidebarAccordionComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'ng-sidebar-accordion',
                    template: "\n    <div [ngClass]=\"_getClassName('left')\" [ngStyle]=\"_getStyle('left')\">\n      <div\n        *ngIf=\"_isResizableGutter('left')\"\n        class=\"ng-sidebar-accordion__gutter-vertical\"\n        (mousedown)=\"_onSidebarResizeBegin('left', $event)\"\n      >\n      </div>\n      <ng-content select=\"ng-sidebar[position=left]\"></ng-content>\n    </div>\n    <div [ngClass]=\"_getClassName('top')\" [ngStyle]=\"_getStyle('top')\">\n      <div\n        *ngIf=\"_isResizableGutter('top')\"\n        class=\"ng-sidebar-accordion__gutter-horizontal\"\n        (mousedown)=\"_onSidebarResizeBegin('top', $event)\"\n      >\n      </div>\n      <ng-content select=\"ng-sidebar[position=top]\"></ng-content>\n    </div>\n    <div [ngClass]=\"_getClassName('right')\" [ngStyle]=\"_getStyle('right')\">\n      <div\n        *ngIf=\"_isResizableGutter('right')\"\n        class=\"ng-sidebar-accordion__gutter-vertical\"\n        (mousedown)=\"_onSidebarResizeBegin('right', $event)\"\n      >\n      </div>\n      <ng-content select=\"ng-sidebar[position=right]\"></ng-content>\n    </div>\n    <div class=\"ng-sidebar-accordion__content-pane\" [ngStyle]=\"_getStyle()\">\n      <ng-content select=\"ng-sidebar-accordion-content\"></ng-content>\n    </div>\n    <div [ngClass]=\"_getClassName('bottom')\" [ngStyle]=\"_getStyle('bottom')\">\n      <div\n        *ngIf=\"_isResizableGutter('bottom')\"\n        class=\"ng-sidebar-accordion__gutter-horizontal\"\n        (mousedown)=\"_onSidebarResizeBegin('bottom', $event)\"\n      >\n      </div>\n      <ng-content select=\"ng-sidebar[position=bottom]\"></ng-content>\n    </div>\n  ",
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    styles: ["::ng-deep.ng-sidebar-accordion .ng-sidebar-header,::ng-deep.ng-sidebar-accordion__bottom-pane,::ng-deep.ng-sidebar-accordion__bottom-pane .ng-sidebar,::ng-deep.ng-sidebar-accordion__content-pane,::ng-deep.ng-sidebar-accordion__left-pane,::ng-deep.ng-sidebar-accordion__left-pane .ng-sidebar,::ng-deep.ng-sidebar-accordion__right-pane,::ng-deep.ng-sidebar-accordion__right-pane .ng-sidebar,::ng-deep.ng-sidebar-accordion__top-pane,::ng-deep.ng-sidebar-accordion__top-pane .ng-sidebar{display:flex;flex-wrap:nowrap;position:relative}::ng-deep:root{--ng-sidebar-accordion-animation-duration:0.5s;--ng-sidebar-accordion-color-bg:#fff;--ng-sidebar-accordion-color__sidebar-header:#fff;--ng-sidebar-accordion-color__sidebar-header-bg:#337ab7;--ng-sidebar-accordion-space__sidebar-content-bottom:300px;--ng-sidebar-accordion-space__sidebar-content-left:300px;--ng-sidebar-accordion-space__sidebar-content-right:300px;--ng-sidebar-accordion-space__sidebar-content-top:300px;--ng-sidebar-accordion-space__sidebar-gutter:10px;--ng-sidebar-accordion-space__sidebar-header:40px;--ng-sidebar-accordion-space__sidebar-header-border:2px}::ng-deep.ng-sidebar-accordion{background-color:var(--ng-sidebar-accordion-color-bg);display:grid;grid-template-areas:\"left-pane top-pane right-pane\" \"left-pane content-pane right-pane\" \"left-pane bottom-pane right-pane\";grid-template-columns:auto 1fr auto;grid-template-rows:auto 1fr auto;height:100%;overflow:hidden;position:relative;width:100%}::ng-deep.ng-sidebar-accordion__left-pane{-ms-grid-column:1;-ms-grid-row:1;-ms-grid-row-span:3;grid-area:left-pane;margin-left:calc(var(--ng-sidebar-accordion-space__sidebar-header-border)*-1)}::ng-deep.ng-sidebar-accordion__left-pane .ng-sidebar-header{border-left:var(--ng-sidebar-accordion-space__sidebar-header-border) solid var(--ng-sidebar-accordion-color-bg)}::ng-deep.ng-sidebar-accordion__left-pane .ng-sidebar{flex-direction:row-reverse}::ng-deep.ng-sidebar-accordion__left-pane .ng-sidebar_opened .ng-sidebar-content{max-width:var(--ng-sidebar-accordion-space__sidebar-content-left);width:var(--ng-sidebar-accordion-space__sidebar-content-left)}::ng-deep.ng-sidebar-accordion__left-pane ::ng-deep.ng-sidebar-accordion__gutter-vertical{right:0}::ng-deep.ng-sidebar-accordion__left-pane_over{box-shadow:10px 0 50px -15px rgba(0,0,0,.4);position:absolute;z-index:2}::ng-deep.ng-sidebar-accordion__top-pane{-ms-grid-column:2;-ms-grid-row:1;flex-direction:column;grid-area:top-pane;margin-top:calc(var(--ng-sidebar-accordion-space__sidebar-header-border)*-1);width:auto!important}::ng-deep.ng-sidebar-accordion__top-pane .ng-sidebar-header{border-top:var(--ng-sidebar-accordion-space__sidebar-header-border) solid var(--ng-sidebar-accordion-color-bg)}::ng-deep.ng-sidebar-accordion__top-pane .ng-sidebar{flex-direction:column-reverse}::ng-deep.ng-sidebar-accordion__top-pane .ng-sidebar_opened .ng-sidebar-content{height:var(--ng-sidebar-accordion-space__sidebar-content-top);max-height:var(--ng-sidebar-accordion-space__sidebar-content-top)}::ng-deep.ng-sidebar-accordion__top-pane ::ng-deep.ng-sidebar-accordion__gutter-horizontal{bottom:0}::ng-deep.ng-sidebar-accordion__top-pane_over{box-shadow:0 10px 50px -15px rgba(0,0,0,.4);position:absolute;z-index:1}::ng-deep.ng-sidebar-accordion__right-pane{-ms-grid-column:3;-ms-grid-row:1;-ms-grid-row-span:3;grid-area:right-pane;margin-right:calc(var(--ng-sidebar-accordion-space__sidebar-header-border)*-1)}::ng-deep.ng-sidebar-accordion__right-pane .ng-sidebar-header{border-right:var(--ng-sidebar-accordion-space__sidebar-header-border) solid var(--ng-sidebar-accordion-color-bg)}::ng-deep.ng-sidebar-accordion__right-pane .ng-sidebar_opened .ng-sidebar-content{max-width:var(--ng-sidebar-accordion-space__sidebar-content-right);width:var(--ng-sidebar-accordion-space__sidebar-content-right)}::ng-deep.ng-sidebar-accordion__right-pane_over{box-shadow:-10px 0 50px -15px rgba(0,0,0,.4);position:absolute;right:0;z-index:2}::ng-deep.ng-sidebar-accordion__bottom-pane{-ms-grid-column:2;-ms-grid-row:3;flex-direction:column;grid-area:bottom-pane;margin-bottom:calc(var(--ng-sidebar-accordion-space__sidebar-header-border)*-1);width:auto!important}::ng-deep.ng-sidebar-accordion__bottom-pane .ng-sidebar-header{border-bottom:var(--ng-sidebar-accordion-space__sidebar-header-border) solid var(--ng-sidebar-accordion-color-bg)}::ng-deep.ng-sidebar-accordion__bottom-pane .ng-sidebar{flex-direction:column}::ng-deep.ng-sidebar-accordion__bottom-pane .ng-sidebar_opened .ng-sidebar-content{height:var(--ng-sidebar-accordion-space__sidebar-content-bottom);max-height:var(--ng-sidebar-accordion-space__sidebar-content-bottom)}::ng-deep.ng-sidebar-accordion__bottom-pane_over{bottom:0;box-shadow:0 -10px 50px -15px rgba(0,0,0,.4);position:absolute;z-index:1}::ng-deep.ng-sidebar-accordion__content-pane{-ms-grid-column:2;-ms-grid-row:2;bottom:0;flex-direction:column;grid-area:content-pane;left:0;overflow:auto;position:absolute;right:0;top:0}::ng-deep.ng-sidebar-accordion__bottom-pane,::ng-deep.ng-sidebar-accordion__top-pane{background-color:var(--ng-sidebar-accordion-color-bg);width:100%}::ng-deep.ng-sidebar-accordion__bottom-pane .ng-sidebar_opened .ng-sidebar-content,::ng-deep.ng-sidebar-accordion__top-pane .ng-sidebar_opened .ng-sidebar-content{transition:height var(--ng-sidebar-accordion-animation-duration)}::ng-deep.ng-sidebar-accordion__bottom-pane .ng-sidebar-header,::ng-deep.ng-sidebar-accordion__top-pane .ng-sidebar-header{align-items:center;height:var(--ng-sidebar-accordion-space__sidebar-header);justify-content:center}::ng-deep.ng-sidebar-accordion__bottom-pane .ng-sidebar-header__wrapper,::ng-deep.ng-sidebar-accordion__top-pane .ng-sidebar-header__wrapper{white-space:nowrap}::ng-deep.ng-sidebar-accordion__bottom-pane .ng-sidebar-content,::ng-deep.ng-sidebar-accordion__top-pane .ng-sidebar-content{height:0;overflow:hidden;transition:height var(--ng-sidebar-accordion-animation-duration)}::ng-deep.ng-sidebar-accordion__left-pane,::ng-deep.ng-sidebar-accordion__right-pane{background-color:var(--ng-sidebar-accordion-color-bg);height:100%}::ng-deep.ng-sidebar-accordion__left-pane .ng-sidebar_opened .ng-sidebar-content,::ng-deep.ng-sidebar-accordion__right-pane .ng-sidebar_opened .ng-sidebar-content{transition:width var(--ng-sidebar-accordion-animation-duration)}::ng-deep.ng-sidebar-accordion__left-pane .ng-sidebar-header__content,::ng-deep.ng-sidebar-accordion__right-pane .ng-sidebar-header__content{align-self:center;width:var(--ng-sidebar-accordion-space__sidebar-header)}::ng-deep.ng-sidebar-accordion__left-pane .ng-sidebar-header__wrapper,::ng-deep.ng-sidebar-accordion__right-pane .ng-sidebar-header__wrapper{transform:rotate(270deg);white-space:nowrap}::ng-deep.ng-sidebar-accordion__left-pane .ng-sidebar-content,::ng-deep.ng-sidebar-accordion__right-pane .ng-sidebar-content{overflow:hidden;transition:width var(--ng-sidebar-accordion-animation-duration);width:0}::ng-deep.ng-sidebar-accordion__bottom-pane_resizable .ng-sidebar_opened .ng-sidebar-content,::ng-deep.ng-sidebar-accordion__left-pane_resizable .ng-sidebar_opened .ng-sidebar-content,::ng-deep.ng-sidebar-accordion__right-pane_resizable .ng-sidebar_opened .ng-sidebar-content,::ng-deep.ng-sidebar-accordion__top-pane_resizable .ng-sidebar_opened .ng-sidebar-content{transition:none}::ng-deep.ng-sidebar-accordion .ng-sidebar-header{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;background-color:var(--ng-sidebar-accordion-color__sidebar-header-bg);color:var(--ng-sidebar-accordion-color__sidebar-header);cursor:pointer;user-select:none}::ng-deep.ng-sidebar-accordion__gutter-vertical{cursor:col-resize;height:100%;width:var(--ng-sidebar-accordion-space__sidebar-gutter)}::ng-deep.ng-sidebar-accordion__gutter-horizontal,::ng-deep.ng-sidebar-accordion__gutter-vertical{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;position:absolute;user-select:none;z-index:1}::ng-deep.ng-sidebar-accordion__gutter-horizontal{cursor:row-resize;height:var(--ng-sidebar-accordion-space__sidebar-gutter);width:100%}"]
                },] }
    ];
    SidebarAccordionComponent.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: core.ChangeDetectorRef }
    ]; };
    SidebarAccordionComponent.propDecorators = {
        classNameSidebarAccordion: [{ type: core.HostBinding, args: ['class.ng-sidebar-accordion',] }],
        width: [{ type: core.Input }, { type: core.HostBinding, args: ['style.width',] }],
        height: [{ type: core.Input }, { type: core.HostBinding, args: ['style.height',] }],
        className: [{ type: core.Input }, { type: core.HostBinding, args: ['class',] }],
        sidebarResizable: [{ type: core.Input }],
        sidebarResizableBegin: [{ type: core.Output }],
        sidebarResizableEnd: [{ type: core.Output }],
        sidebarOpenedChange: [{ type: core.Output }],
        sideBarSettingsList: [{ type: core.ContentChildren, args: [SidebarSettingsComponent,] }]
    };

    var SidebarComponent = /** @class */ (function () {
        function SidebarComponent(_container) {
            this._container = _container;
            this.classNameSidebar = true;
            this.headerClicked = new core.EventEmitter();
            this.headerTouchMoved = new core.EventEmitter();
            this.headerTouchEnded = new core.EventEmitter();
            this.openedChange = new core.EventEmitter();
            this.classNameSidebarOpened = false;
            this._headers = [];
            this._contents = [];
            this._opened = false;
            if (!this._container) {
                throw new Error('<ng-sidebar-accordion> must be inside a <ng-sidebar-accordion></ng-sidebar-accordion>.');
            }
        }
        Object.defineProperty(SidebarComponent.prototype, "opened", {
            get: function () {
                return this._opened;
            },
            set: function (value) {
                if (this._opened !== value) {
                    this._opened = value;
                    this.classNameSidebarOpened = value;
                    this.openedChange.emit({ sender: this, opened: value });
                }
            },
            enumerable: false,
            configurable: true
        });
        ;
        Object.defineProperty(SidebarComponent.prototype, "_headersLength", {
            get: function () {
                return this._headers.length;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SidebarComponent.prototype, "_contentsLength", {
            get: function () {
                return this._contents.length;
            },
            enumerable: false,
            configurable: true
        });
        SidebarComponent.prototype.ngOnInit = function () {
            this._container._addSidebar(this);
        };
        SidebarComponent.prototype.ngOnDestroy = function () {
            this._container._removeSidebar(this);
            this.unsubscribe();
        };
        SidebarComponent.prototype._addHeader = function (header) {
            if (this._headersLength > 0) {
                throw new Error('<ng-sidebar-header> must be only one.');
            }
            this._headers.push(header);
            this.subscribe(header);
        };
        SidebarComponent.prototype._removeHeader = function (header) {
            var index = this._headers.indexOf(header);
            if (index !== -1) {
                this._headers.splice(index, 1);
            }
        };
        SidebarComponent.prototype._addContent = function (content) {
            if (this._contentsLength > 0) {
                throw new Error('<ng-sidebar-content> must be only one.');
            }
            this._contents.push(content);
        };
        SidebarComponent.prototype._removeContent = function (content) {
            var index = this._contents.indexOf(content);
            if (index !== -1) {
                this._contents.splice(index, 1);
            }
        };
        SidebarComponent.prototype.open = function () {
            this.opened = true;
        };
        SidebarComponent.prototype.close = function () {
            this.opened = false;
        };
        SidebarComponent.prototype.subscribe = function (header) {
            var _this = this;
            header.clicked.subscribe(function () {
                _this.headerClicked.emit(_this);
            });
            header.touchMoved.subscribe(function (e) {
                _this.headerTouchMoved.emit({ sender: _this, originalEvent: e });
            });
            header.touchEnded.subscribe(function (e) {
                _this.headerTouchEnded.emit({ sender: _this, originalEvent: e });
            });
        };
        SidebarComponent.prototype.unsubscribe = function () {
            this._headers.forEach(function (header) {
                header.clicked.unsubscribe();
                header.touchMoved.unsubscribe();
                header.touchEnded.unsubscribe();
            });
        };
        return SidebarComponent;
    }());
    SidebarComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'ng-sidebar',
                    template: "\n    <ng-content select=\"ng-sidebar-header, [ng-sidebar-header]\"></ng-content>\n    <ng-content select=\"ng-sidebar-content, [ng-sidebar-content]\"></ng-content>\n  ",
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] }
    ];
    SidebarComponent.ctorParameters = function () { return [
        { type: SidebarAccordionComponent, decorators: [{ type: core.Optional }] }
    ]; };
    SidebarComponent.propDecorators = {
        position: [{ type: core.Input }, { type: core.HostBinding, args: ['attr.position',] }],
        classNameSidebar: [{ type: core.Input }, { type: core.HostBinding, args: ['class.ng-sidebar',] }],
        className: [{ type: core.Input }, { type: core.HostBinding, args: ['class',] }],
        style: [{ type: core.Input }, { type: core.HostBinding, args: ['style',] }],
        headerClicked: [{ type: core.Output }],
        headerTouchMoved: [{ type: core.Output }],
        headerTouchEnded: [{ type: core.Output }],
        openedChange: [{ type: core.Output }],
        classNameSidebarOpened: [{ type: core.HostBinding, args: ['class.ng-sidebar_opened',] }],
        opened: [{ type: core.Input }]
    };

    var SidebarHeaderComponent = /** @class */ (function () {
        function SidebarHeaderComponent(_container) {
            this._container = _container;
            this.classNameSidebarHeader = true;
            this.clicked = new core.EventEmitter();
            this.touchMoved = new core.EventEmitter();
            this.touchEnded = new core.EventEmitter();
            if (!this._container) {
                throw new Error('<ng-sidebar-header> must be inside a <ng-sidebar></ng-sidebar>.');
            }
        }
        SidebarHeaderComponent.prototype.onHeaderClick = function (e) {
            this.clicked.emit(e);
        };
        SidebarHeaderComponent.prototype.onHeaderTouchMove = function (e) {
            e.preventDefault();
            this.touchMoved.emit(e);
        };
        SidebarHeaderComponent.prototype.onHeaderTouchEnd = function (e) {
            e.preventDefault();
            this.touchEnded.emit(e);
        };
        SidebarHeaderComponent.prototype.ngOnInit = function () {
            this._container._addHeader(this);
        };
        SidebarHeaderComponent.prototype.ngOnDestroy = function () {
            this._container._removeHeader(this);
        };
        return SidebarHeaderComponent;
    }());
    SidebarHeaderComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'ng-sidebar-header',
                    template: "\n    <div class=\"ng-sidebar-header__content\">\n      <div class=\"ng-sidebar-header__wrapper\">\n        <ng-content></ng-content>\n      </div>\n    </div>",
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] }
    ];
    SidebarHeaderComponent.ctorParameters = function () { return [
        { type: SidebarComponent, decorators: [{ type: core.Optional }] }
    ]; };
    SidebarHeaderComponent.propDecorators = {
        classNameSidebarHeader: [{ type: core.HostBinding, args: ['class.ng-sidebar-header',] }],
        className: [{ type: core.Input }, { type: core.HostBinding, args: ['class',] }],
        clicked: [{ type: core.Output }],
        touchMoved: [{ type: core.Output }],
        touchEnded: [{ type: core.Output }],
        onHeaderClick: [{ type: core.HostListener, args: ['click', ['$event'],] }],
        onHeaderTouchMove: [{ type: core.HostListener, args: ['touchmove', ['$event'],] }],
        onHeaderTouchEnd: [{ type: core.HostListener, args: ['touchend', ['$event'],] }]
    };

    var SidebarContentComponent = /** @class */ (function () {
        function SidebarContentComponent(_container, element) {
            this._container = _container;
            this.element = element;
            this.classNameSidebarContent = true;
            if (!this._container) {
                throw new Error('<ng-sidebar-content> must be inside a <ng-sidebar></ng-sidebar>.');
            }
        }
        SidebarContentComponent.prototype.ngOnInit = function () {
            this._container._addContent(this);
        };
        SidebarContentComponent.prototype.ngOnDestroy = function () {
            this._container._removeContent(this);
        };
        return SidebarContentComponent;
    }());
    SidebarContentComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'ng-sidebar-content',
                    template: "\n    <ng-content></ng-content>",
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] }
    ];
    SidebarContentComponent.ctorParameters = function () { return [
        { type: SidebarComponent, decorators: [{ type: core.Optional }] },
        { type: core.ElementRef }
    ]; };
    SidebarContentComponent.propDecorators = {
        classNameSidebarContent: [{ type: core.HostBinding, args: ['class.ng-sidebar-content',] }],
        className: [{ type: core.Input }, { type: core.HostBinding, args: ['class',] }]
    };

    var SidebarAccordionContentComponent = /** @class */ (function () {
        function SidebarAccordionContentComponent(_container) {
            this._container = _container;
            this.classNameSidebarAccordionContent = true;
            if (!this._container) {
                throw new Error('<ng-sidebar-accordion-content> must be inside a <ng-sidebar-accordion></ng-sidebar-accordion>.');
            }
        }
        return SidebarAccordionContentComponent;
    }());
    SidebarAccordionContentComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'ng-sidebar-accordion-content',
                    template: "\n    <ng-content></ng-content>",
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] }
    ];
    SidebarAccordionContentComponent.ctorParameters = function () { return [
        { type: SidebarAccordionComponent, decorators: [{ type: core.Optional }] }
    ]; };
    SidebarAccordionContentComponent.propDecorators = {
        classNameSidebarAccordionContent: [{ type: core.HostBinding, args: ['class.ng-sidebar-accordion-content',] }],
        className: [{ type: core.Input }, { type: core.HostBinding, args: ['class',] }]
    };

    var SidebarAccordionModule = /** @class */ (function () {
        function SidebarAccordionModule() {
        }
        return SidebarAccordionModule;
    }());
    SidebarAccordionModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [
                        SidebarHeaderComponent,
                        SidebarContentComponent,
                        SidebarComponent,
                        SidebarAccordionContentComponent,
                        SidebarAccordionComponent,
                        SidebarSettingsComponent
                    ],
                    exports: [
                        SidebarHeaderComponent,
                        SidebarContentComponent,
                        SidebarComponent,
                        SidebarAccordionContentComponent,
                        SidebarAccordionComponent,
                        SidebarSettingsComponent
                    ]
                },] }
    ];

    var SidebarMouseTouchEventArgs = /** @class */ (function () {
        function SidebarMouseTouchEventArgs() {
        }
        return SidebarMouseTouchEventArgs;
    }());

    /*
     * Public API Surface of ng-sidebar-accordion
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.SidebarAccordionComponent = SidebarAccordionComponent;
    exports.SidebarAccordionContentComponent = SidebarAccordionContentComponent;
    exports.SidebarAccordionModule = SidebarAccordionModule;
    exports.SidebarComponent = SidebarComponent;
    exports.SidebarContentComponent = SidebarContentComponent;
    exports.SidebarHeaderComponent = SidebarHeaderComponent;
    exports.SidebarMouseTouchEventArgs = SidebarMouseTouchEventArgs;
    exports.SidebarSettingsComponent = SidebarSettingsComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ng-sidebar-accordion.umd.js.map
