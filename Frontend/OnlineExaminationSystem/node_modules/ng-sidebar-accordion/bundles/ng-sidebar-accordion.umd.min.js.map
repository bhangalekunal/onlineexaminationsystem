{"version":3,"sources":["../../../projects/ng-sidebar-accordion/src/lib/sidebar-settings.component.ts","../../../projects/ng-sidebar-accordion/src/lib/sidebar-accordion/sidebar-accordion.component.ts","../../../projects/ng-sidebar-accordion/src/lib/sidebar.component.ts","../../../projects/ng-sidebar-accordion/src/lib/sidebar-header.component.ts","../../../projects/ng-sidebar-accordion/src/lib/sidebar-content.component.ts","../../../projects/ng-sidebar-accordion/src/lib/sidebar-accordion-content.component.ts","../../../projects/ng-sidebar-accordion/src/lib/sidebar-accordion.module.ts","../../../projects/ng-sidebar-accordion/src/lib/sidebar-mouse-touch.event-args.ts"],"names":["SidebarSettingsComponent","this","modeChange","EventEmitter","positionChange","Object","defineProperty","prototype","_position","value","emit","_mode","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","Output","Input","SidebarAccordionComponent","element","cdRef","_this","classNameSidebarAccordion","sidebarResizableBegin","sidebarResizableEnd","sidebarOpenedChange","_sidebars","onMouseMove","e","_resizeSidebar","root","document","documentElement","positionValue","position","clientX","mouseClientX","clientY","mouseClientY","getDiffPositionValue","spaceContent","style","setProperty","correctMaxSizeSidebars","onMouseUp","groupBy","xs","key","reduce","rv","x","push","ngAfterViewInit","groupSettings","sideBarSettingsList","toArray","keys","forEach","length","Error","sidebarSettingsSubscribe","ngOnInit","window","addEventListener","ngOnDestroy","removeEventListener","sidebarUnsubscribe","sidebarSettingsUnsubscribe","_addSidebar","sidebar","sidebarSubscribe","_removeSidebar","index","indexOf","splice","_isResizableGutter","sidebarResizable","groupByPosition","hasOwnProperty","find","s","opened","_getClassName","sideBarSettings","filter","mode","_getStyle","spaceSidebarHeader","getComputedStyle","getPropertyValue","replace","spaceSidebarHeaderBorder","leftPaneIsOver","topPaneIsOver","rightPaneIsOver","bottomPaneIsOver","leftSidebarCount","_headersLength","topSidebarCount","rightSidebarCount","bottomSidebarCount","left","right","paddingLeft","paddingRight","undefined","paddingTop","paddingBottom","_onSidebarResizeBegin","open","sidebarToggle","close","getSidebarIndex","reverse","findIndex","setSpaceSidebar","openedSidebars","outOfScreenSize","spaceSidebar","spaceValue","outOfScreenWidth","nativeElement","scrollWidth","clientWidth","outOfScreenHeight","scrollHeight","clientHeight","ss","headerClicked","subscribe","headerTouchMoved","isAllowResizable","sender","originalEvent","touches","headerTouchEnded","openedChange","markForCheck","animationDuration","setTimeout","unsubscribe","ElementRef","ChangeDetectorRef","HostBinding","type","ContentChildren","SidebarComponent","_container","classNameSidebar","classNameSidebarOpened","_headers","_contents","_opened","_addHeader","header","_removeHeader","_addContent","content","_contentsLength","_removeContent","clicked","touchMoved","touchEnded","decorators","Optional","SidebarHeaderComponent","classNameSidebarHeader","onHeaderClick","onHeaderTouchMove","preventDefault","onHeaderTouchEnd","HostListener","SidebarContentComponent","classNameSidebarContent","classNameSidebarAccordionContent","NgModule","imports","CommonModule","declarations","SidebarAccordionContentComponent","exports"],"mappings":"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","sourcesContent":["import {ChangeDetectionStrategy, Component, EventEmitter, Input, Output} from '@angular/core';\r\n\r\ntype position = 'left' | 'top' | 'right' | 'bottom';\r\ntype mode = 'push' | 'over';\r\n\r\n@Component({\r\n  selector: 'ng-sidebar-settings',\r\n  template: '',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SidebarSettingsComponent {\r\n\r\n  @Output() modeChange = new EventEmitter<SidebarSettingsComponent>();\r\n  @Output() positionChange = new EventEmitter<SidebarSettingsComponent>();\r\n\r\n  private _position: position;\r\n\r\n  @Input() get position(): position {\r\n    return this._position;\r\n  };\r\n\r\n  set position(value: position) {\r\n    this._position = value;\r\n    this.positionChange.emit(this);\r\n  }\r\n\r\n  private _mode: mode;\r\n\r\n  @Input() get mode(): mode {\r\n    return this._mode;\r\n  }\r\n\r\n  set mode(value: mode) {\r\n    this._mode = value;\r\n    this.modeChange.emit(this);\r\n  }\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  QueryList\r\n} from '@angular/core';\r\nimport {SidebarComponent} from \"../sidebar.component\";\r\nimport {SidebarSettingsComponent} from \"../sidebar-settings.component\";\r\nimport {SidebarOpenedEventArgs} from \"../sidebar-opened.event-args\";\r\nimport {SidebarMouseTouchEventArgs} from \"../sidebar-mouse-touch.event-args\";\r\n\r\nexport type position = 'all' | 'left' | 'top' | 'right' | 'bottom';\r\n\r\n@Component({\r\n  selector: 'ng-sidebar-accordion',\r\n  template: `\r\n    <div [ngClass]=\"_getClassName('left')\" [ngStyle]=\"_getStyle('left')\">\r\n      <div\r\n        *ngIf=\"_isResizableGutter('left')\"\r\n        class=\"ng-sidebar-accordion__gutter-vertical\"\r\n        (mousedown)=\"_onSidebarResizeBegin('left', $event)\"\r\n      >\r\n      </div>\r\n      <ng-content select=\"ng-sidebar[position=left]\"></ng-content>\r\n    </div>\r\n    <div [ngClass]=\"_getClassName('top')\" [ngStyle]=\"_getStyle('top')\">\r\n      <div\r\n        *ngIf=\"_isResizableGutter('top')\"\r\n        class=\"ng-sidebar-accordion__gutter-horizontal\"\r\n        (mousedown)=\"_onSidebarResizeBegin('top', $event)\"\r\n      >\r\n      </div>\r\n      <ng-content select=\"ng-sidebar[position=top]\"></ng-content>\r\n    </div>\r\n    <div [ngClass]=\"_getClassName('right')\" [ngStyle]=\"_getStyle('right')\">\r\n      <div\r\n        *ngIf=\"_isResizableGutter('right')\"\r\n        class=\"ng-sidebar-accordion__gutter-vertical\"\r\n        (mousedown)=\"_onSidebarResizeBegin('right', $event)\"\r\n      >\r\n      </div>\r\n      <ng-content select=\"ng-sidebar[position=right]\"></ng-content>\r\n    </div>\r\n    <div class=\"ng-sidebar-accordion__content-pane\" [ngStyle]=\"_getStyle()\">\r\n      <ng-content select=\"ng-sidebar-accordion-content\"></ng-content>\r\n    </div>\r\n    <div [ngClass]=\"_getClassName('bottom')\" [ngStyle]=\"_getStyle('bottom')\">\r\n      <div\r\n        *ngIf=\"_isResizableGutter('bottom')\"\r\n        class=\"ng-sidebar-accordion__gutter-horizontal\"\r\n        (mousedown)=\"_onSidebarResizeBegin('bottom', $event)\"\r\n      >\r\n      </div>\r\n      <ng-content select=\"ng-sidebar[position=bottom]\"></ng-content>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./sidebar-accordion.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SidebarAccordionComponent implements AfterViewInit, OnInit, OnDestroy {\r\n\r\n  @HostBinding('class.ng-sidebar-accordion') classNameSidebarAccordion = true;\r\n\r\n  @Input() @HostBinding('style.width') width: string;\r\n  @Input() @HostBinding('style.height') height: string;\r\n  @Input() @HostBinding('class') className: string;\r\n  @Input() sidebarResizable: boolean;\r\n\r\n  @Output() sidebarResizableBegin = new EventEmitter<position>();\r\n  @Output() sidebarResizableEnd = new EventEmitter<position>();\r\n  @Output() sidebarOpenedChange = new EventEmitter<SidebarComponent>();\r\n\r\n  @ContentChildren(SidebarSettingsComponent) sideBarSettingsList: QueryList<SidebarSettingsComponent>;\r\n\r\n  private _sidebars: Array<SidebarComponent> = [];\r\n  private _resizeSidebar: {\r\n    position: position,\r\n    mouseClientX: number,\r\n    mouseClientY: number,\r\n    spaceContent: number\r\n  };\r\n\r\n  constructor(private element: ElementRef, private cdRef: ChangeDetectorRef) {\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    const groupSettings = this.groupBy(this.sideBarSettingsList.toArray(), 'position');\r\n\r\n    Object.keys(groupSettings)\r\n      .forEach(key => {\r\n        if (groupSettings[key].length > 1) {\r\n          throw new Error('<ng-sidebar-settings> ng-sidebar-settings can\\'t be more than one with the same position.')\r\n        }\r\n      });\r\n\r\n    this.sidebarSettingsSubscribe();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    window.addEventListener('mousemove', this.onMouseMove);\r\n    window.addEventListener('mouseup', this.onMouseUp);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    window.removeEventListener('mousemove', this.onMouseMove);\r\n    window.removeEventListener('mouseup', this.onMouseUp);\r\n    this.sidebarUnsubscribe();\r\n    this.sidebarSettingsUnsubscribe();\r\n  }\r\n\r\n  _addSidebar(sidebar: SidebarComponent): void {\r\n    this._sidebars.push(sidebar);\r\n    this.sidebarSubscribe(sidebar);\r\n  }\r\n\r\n  _removeSidebar(sidebar: SidebarComponent): void {\r\n    const index = this._sidebars.indexOf(sidebar);\r\n    if (index !== -1) {\r\n      this._sidebars.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  _isResizableGutter(position: position): boolean {\r\n    if (!position || !this.sidebarResizable) {\r\n      return false;\r\n    }\r\n\r\n    const groupByPosition = this.groupBy(this._sidebars, 'position');\r\n\r\n    if (groupByPosition.hasOwnProperty(position)) {\r\n      return !!groupByPosition[position].find(s => s.opened);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  _getClassName(position: position): string {\r\n    const sideBarSettings = this.sideBarSettingsList.filter(s => s.position === position);\r\n\r\n    return `ng-sidebar-accordion__${position}-pane${\r\n      (this._resizeSidebar && this._resizeSidebar.position === position\r\n        ?\r\n        ` ng-sidebar-accordion__${position}-pane_resizable`\r\n        : '')\r\n    }${\r\n      (sideBarSettings.length > 0 && sideBarSettings[0].mode === 'over'\r\n          ? ` ng-sidebar-accordion__${position}-pane_over`\r\n          : ''\r\n      )\r\n    }`;\r\n  }\r\n\r\n  _getStyle(position?: position) {\r\n    const root = document.documentElement;\r\n    const spaceSidebarHeader = +getComputedStyle(root)\r\n      .getPropertyValue(`--ng-sidebar-accordion-space__sidebar-header`)\r\n      .replace('px', '');\r\n\r\n    const spaceSidebarHeaderBorder = +getComputedStyle(root)\r\n      .getPropertyValue(`--ng-sidebar-accordion-space__sidebar-header-border`)\r\n      .replace('px', '');\r\n\r\n    const leftPaneIsOver = this.sideBarSettingsList.filter(s => s.position === 'left' && s.mode === 'over').length > 0;\r\n    const topPaneIsOver = this.sideBarSettingsList.filter(s => s.position === 'top' && s.mode === 'over').length > 0;\r\n    const rightPaneIsOver = this.sideBarSettingsList.filter(s => s.position === 'right' && s.mode === 'over').length > 0;\r\n    const bottomPaneIsOver = this.sideBarSettingsList.filter(s => s.position === 'bottom' && s.mode === 'over').length > 0;\r\n\r\n    const leftSidebarCount = this._sidebars.filter(s => s.position === 'left' && s._headersLength > 0).length;\r\n    const topSidebarCount = this._sidebars.filter(s => s.position === 'top' && s._headersLength > 0).length;\r\n    const rightSidebarCount = this._sidebars.filter(s => s.position === 'right' && s._headersLength > 0).length;\r\n    const bottomSidebarCount = this._sidebars.filter(s => s.position === 'bottom' && s._headersLength > 0).length;\r\n\r\n    let style: any = {};\r\n\r\n    switch (position) {\r\n      case 'top':\r\n      case 'bottom':\r\n        const currentPaneIsOver = this.sideBarSettingsList.filter(s => s.position === position && s.mode === 'over').length > 0;\r\n\r\n        if (currentPaneIsOver) {\r\n          if (leftPaneIsOver) {\r\n            style.left = leftSidebarCount * spaceSidebarHeader + spaceSidebarHeaderBorder + 'px';\r\n          } else {\r\n            style.left = '0';\r\n          }\r\n          if (rightPaneIsOver) {\r\n            style.right = rightSidebarCount * spaceSidebarHeader + spaceSidebarHeaderBorder + 'px';\r\n          } else {\r\n            style.right = '0';\r\n          }\r\n          return style;\r\n        } else {\r\n          if (leftPaneIsOver) {\r\n            style.paddingLeft = leftSidebarCount * spaceSidebarHeader + spaceSidebarHeaderBorder + 'px';\r\n          }\r\n\r\n          if (rightPaneIsOver) {\r\n            style.paddingRight = rightSidebarCount * spaceSidebarHeader + spaceSidebarHeaderBorder + 'px';\r\n          }\r\n          return style;\r\n        }\r\n      case undefined:\r\n      case null:\r\n        if (leftPaneIsOver) {\r\n          style.paddingLeft = leftSidebarCount * spaceSidebarHeader + spaceSidebarHeaderBorder + 'px';\r\n        }\r\n        if (topPaneIsOver) {\r\n          style.paddingTop = topSidebarCount * spaceSidebarHeader + spaceSidebarHeaderBorder + 'px';\r\n        }\r\n        if (rightPaneIsOver) {\r\n          style.paddingRight = rightSidebarCount * spaceSidebarHeader + spaceSidebarHeaderBorder + 'px';\r\n        }\r\n        if (bottomPaneIsOver) {\r\n          style.paddingBottom = bottomSidebarCount * spaceSidebarHeader + spaceSidebarHeaderBorder + 'px';\r\n        }\r\n\r\n        return style;\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  _onSidebarResizeBegin(position: position, e: MouseEvent): void {\r\n    const root = document.documentElement;\r\n\r\n    this._resizeSidebar = {\r\n      position,\r\n      mouseClientX: e.clientX,\r\n      mouseClientY: e.clientY,\r\n      spaceContent: +getComputedStyle(root)\r\n        .getPropertyValue(`--ng-sidebar-accordion-space__sidebar-content-${position}`)\r\n        .replace('px', '')\r\n    };\r\n\r\n    this.sidebarResizableBegin.emit(position);\r\n  }\r\n\r\n  open(value: position, index: number = 0): void {\r\n\r\n    this.sidebarToggle(value, index, true);\r\n  }\r\n\r\n  close(value: position): void {\r\n    this.sidebarToggle(value, null, false);\r\n  }\r\n\r\n  onMouseMove = (e: MouseEvent): void => {\r\n    if (!this._resizeSidebar) {\r\n      return;\r\n    }\r\n\r\n    const root = document.documentElement;\r\n\r\n    const getDiffPositionValue = () => {\r\n      switch (this._resizeSidebar.position) {\r\n        case 'left':\r\n          return e.clientX - this._resizeSidebar.mouseClientX;\r\n        case 'right':\r\n          return (e.clientX - this._resizeSidebar.mouseClientX) * -1;\r\n        case 'top':\r\n          return e.clientY - this._resizeSidebar.mouseClientY;\r\n        case 'bottom':\r\n          return (e.clientY - this._resizeSidebar.mouseClientY) * -1;\r\n        default:\r\n          return 0;\r\n      }\r\n    }\r\n\r\n    let positionValue = getDiffPositionValue() + this._resizeSidebar.spaceContent;\r\n\r\n    if (positionValue < 0) {\r\n      positionValue = 0;\r\n    }\r\n\r\n    root.style.setProperty(`--ng-sidebar-accordion-space__sidebar-content-${this._resizeSidebar.position}`,\r\n      positionValue + 'px');\r\n\r\n    this.correctMaxSizeSidebars();\r\n  }\r\n\r\n  onMouseUp = (): void => {\r\n    if (this._resizeSidebar) {\r\n      const position = this._resizeSidebar.position;\r\n      delete this._resizeSidebar;\r\n\r\n      this.sidebarResizableEnd.emit(position);\r\n    }\r\n  }\r\n\r\n  getSidebarIndex(sidebar: SidebarComponent): number {\r\n\r\n    if (!sidebar) {\r\n      return -1;\r\n    }\r\n\r\n    const groupByPosition = this.groupBy(this._sidebars, 'position');\r\n\r\n    if (groupByPosition.hasOwnProperty('left')) {\r\n      groupByPosition['left'].reverse();\r\n    }\r\n\r\n    if (groupByPosition.hasOwnProperty('top')) {\r\n      groupByPosition['top'].reverse();\r\n    }\r\n\r\n    if (groupByPosition.hasOwnProperty(sidebar.position)) {\r\n      return groupByPosition[sidebar.position].findIndex(s => s === sidebar);\r\n    }\r\n\r\n    return -1;\r\n  }\r\n\r\n  private sidebarToggle(position: position, index: number, opened: boolean): void {\r\n    const groupByPosition = this.groupBy(this._sidebars, 'position');\r\n\r\n    if (groupByPosition.hasOwnProperty('left')) {\r\n      groupByPosition['left'].reverse();\r\n    }\r\n\r\n    if (groupByPosition.hasOwnProperty('top')) {\r\n      groupByPosition['top'].reverse();\r\n    }\r\n\r\n    switch (position) {\r\n      case 'all':\r\n        Object.keys(groupByPosition).forEach(key => {\r\n          opened\r\n            ? groupByPosition[key][index].open()\r\n            : index\r\n            ? groupByPosition[key][index].close()\r\n            : groupByPosition[key].forEach(s => s.close());\r\n        })\r\n        break;\r\n      default:\r\n        opened\r\n          ? groupByPosition[position][index].open()\r\n          : index\r\n          ? groupByPosition[position][index].close()\r\n          : groupByPosition[position].forEach(s => s.close());\r\n        break;\r\n    }\r\n  }\r\n\r\n  private correctMaxSizeSidebars() {\r\n\r\n    const setSpaceSidebar = (openedSidebars, outOfScreenSize) => {\r\n      openedSidebars.forEach(s => {\r\n\r\n        let spaceSidebar = +getComputedStyle(root)\r\n          .getPropertyValue(`--ng-sidebar-accordion-space__sidebar-content-${s.position}`)\r\n          .replace('px', '');\r\n\r\n        if (spaceSidebar < 0) {\r\n          spaceSidebar *= -1;\r\n        }\r\n\r\n        let spaceValue = spaceSidebar - outOfScreenSize;\r\n\r\n        if (spaceValue < 0) {\r\n          spaceValue = 0;\r\n        }\r\n\r\n        root.style.setProperty(`--ng-sidebar-accordion-space__sidebar-content-${s.position}`,\r\n          spaceValue + 'px');\r\n      });\r\n    }\r\n\r\n    const root = document.documentElement;\r\n\r\n    const spaceSidebarHeaderBorder = +getComputedStyle(root)\r\n      .getPropertyValue(`--ng-sidebar-accordion-space__sidebar-header-border`)\r\n      .replace('px', '');\r\n\r\n    const outOfScreenWidth = this.element.nativeElement.scrollWidth - (this.element.nativeElement.clientWidth + spaceSidebarHeaderBorder);\r\n    const outOfScreenHeight = this.element.nativeElement.scrollHeight - (this.element.nativeElement.clientHeight + spaceSidebarHeaderBorder);\r\n\r\n    if (outOfScreenWidth > 0) {\r\n      const openedSidebarsW = this._sidebars\r\n        .filter(s => (s.position === 'left' || s.position === 'right') && s.opened\r\n          && !this.sideBarSettingsList.find(ss => ss.position === s.position && ss.mode === 'over'));\r\n      setSpaceSidebar(openedSidebarsW, outOfScreenWidth);\r\n    }\r\n    if (outOfScreenHeight > 0) {\r\n      const openedSidebarsH = this._sidebars\r\n        .filter(s => (s.position === 'top' || s.position === 'bottom') && s.opened\r\n          && !this.sideBarSettingsList.find(ss => ss.position === s.position && ss.mode === 'over'));\r\n\r\n      setSpaceSidebar(openedSidebarsH, outOfScreenHeight);\r\n    }\r\n\r\n  }\r\n\r\n  private groupBy = (xs, key) => {\r\n    return xs.reduce(function (rv, x) {\r\n      (rv[x[key]] = rv[x[key]] || []).push(x);\r\n      return rv;\r\n    }, {});\r\n  };\r\n\r\n  private sidebarSubscribe(sidebar: SidebarComponent): void {\r\n    sidebar.headerClicked.subscribe((e: SidebarComponent) => {\r\n      e.opened ? e.close() : e.open();\r\n    });\r\n\r\n    sidebar.headerTouchMoved.subscribe((e: SidebarMouseTouchEventArgs) => {\r\n      const isAllowResizable = this._sidebars\r\n        .filter(s => s.position === e.sender.position && s.opened).length > 0;\r\n\r\n      if (this.sidebarResizable && isAllowResizable) {\r\n\r\n        const groupByPosition = this.groupBy(this._sidebars, 'position');\r\n\r\n        if (groupByPosition.hasOwnProperty('left')) {\r\n          groupByPosition['left'].reverse();\r\n        }\r\n\r\n        if (groupByPosition.hasOwnProperty('top')) {\r\n          groupByPosition['top'].reverse();\r\n        }\r\n\r\n        // move only first sidebar\r\n        if (e.sender === groupByPosition[e.sender.position][0]) {\r\n          if (!this._resizeSidebar) {\r\n            this._onSidebarResizeBegin(e.sender.position, {\r\n              clientX: e.originalEvent.touches[0].clientX,\r\n              clientY: e.originalEvent.touches[0].clientY\r\n            } as MouseEvent);\r\n          } else {\r\n            this.onMouseMove({\r\n              clientX: e.originalEvent.touches[0].clientX,\r\n              clientY: e.originalEvent.touches[0].clientY\r\n            } as MouseEvent);\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    sidebar.headerTouchEnded.subscribe((e: SidebarMouseTouchEventArgs) => {\r\n      if (this._resizeSidebar) {\r\n        this.onMouseUp();\r\n      } else {\r\n        e.sender.opened ? e.sender.close() : e.sender.open();\r\n      }\r\n    });\r\n\r\n    sidebar.openedChange.subscribe((e: SidebarOpenedEventArgs) => {\r\n      if (e.opened) {\r\n        this._sidebars.filter(s => s.opened && s != e.sender &&\r\n          s.position === e.sender.position\r\n        ).forEach(s => s.close());\r\n      }\r\n      this.cdRef.markForCheck();\r\n\r\n      const root = document.documentElement;\r\n      const animationDuration = +getComputedStyle(root)\r\n        .getPropertyValue(`--ng-sidebar-accordion-animation-duration`)\r\n        .replace('s', '');\r\n\r\n      setTimeout(() => this.correctMaxSizeSidebars(), 1000 * animationDuration);\r\n\r\n      this.sidebarOpenedChange.emit(e.sender);\r\n    });\r\n  }\r\n\r\n  private sidebarUnsubscribe(): void {\r\n    this._sidebars.forEach(sidebar => {\r\n      sidebar.headerClicked.unsubscribe();\r\n      sidebar.openedChange.unsubscribe();\r\n      sidebar.headerTouchMoved.unsubscribe();\r\n      sidebar.headerTouchEnded.unsubscribe();\r\n    });\r\n  }\r\n\r\n  private sidebarSettingsSubscribe() {\r\n    this.sideBarSettingsList.forEach(s => {\r\n      s.modeChange.subscribe(() => {\r\n        this.cdRef.markForCheck();\r\n      });\r\n\r\n      s.positionChange.subscribe(() => {\r\n        this.cdRef.markForCheck();\r\n      })\r\n    });\r\n  }\r\n\r\n  private sidebarSettingsUnsubscribe() {\r\n    this.sideBarSettingsList.forEach(s => {\r\n      s.modeChange.unsubscribe();\r\n      s.positionChange.unsubscribe();\r\n    })\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output\r\n} from '@angular/core';\r\nimport {SidebarAccordionComponent} from './sidebar-accordion/sidebar-accordion.component';\r\nimport {SidebarHeaderComponent} from \"./sidebar-header.component\";\r\nimport {SidebarContentComponent} from \"./sidebar-content.component\";\r\nimport {SidebarOpenedEventArgs} from \"./sidebar-opened.event-args\";\r\nimport {SidebarMouseTouchEventArgs} from \"./sidebar-mouse-touch.event-args\";\r\n\r\n@Component({\r\n  selector: 'ng-sidebar',\r\n  template: `\r\n    <ng-content select=\"ng-sidebar-header, [ng-sidebar-header]\"></ng-content>\r\n    <ng-content select=\"ng-sidebar-content, [ng-sidebar-content]\"></ng-content>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SidebarComponent implements OnInit, OnDestroy {\r\n\r\n  @Input() @HostBinding('attr.position') position: 'left' | 'right' | 'top' | 'bottom';\r\n  @Input() @HostBinding('class.ng-sidebar') classNameSidebar = true;\r\n  @Input() @HostBinding('class') className: string;\r\n  @Input() @HostBinding('style') style: CSSStyleDeclaration;\r\n\r\n  @Output() headerClicked = new EventEmitter<SidebarComponent>();\r\n  @Output() headerTouchMoved = new EventEmitter<SidebarMouseTouchEventArgs>();\r\n  @Output() headerTouchEnded = new EventEmitter<SidebarMouseTouchEventArgs>();\r\n  @Output() openedChange = new EventEmitter<SidebarOpenedEventArgs>();\r\n\r\n  @HostBinding('class.ng-sidebar_opened') classNameSidebarOpened = false;\r\n\r\n  private _headers: Array<SidebarHeaderComponent> = [];\r\n  private _contents: Array<SidebarContentComponent> = [];\r\n\r\n  constructor(@Optional() private _container: SidebarAccordionComponent) {\r\n    if (!this._container) {\r\n      throw new Error('<ng-sidebar-accordion> must be inside a <ng-sidebar-accordion></ng-sidebar-accordion>.');\r\n    }\r\n  }\r\n\r\n  private _opened = false;\r\n\r\n  @Input() get opened(): boolean {\r\n    return this._opened;\r\n  };\r\n\r\n  set opened(value: boolean) {\r\n    if (this._opened !== value) {\r\n      this._opened = value;\r\n      this.classNameSidebarOpened = value;\r\n      this.openedChange.emit({sender: this, opened: value});\r\n    }\r\n  }\r\n\r\n  get _headersLength() {\r\n    return this._headers.length;\r\n  }\r\n\r\n  get _contentsLength() {\r\n    return this._contents.length;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this._container._addSidebar(this);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._container._removeSidebar(this);\r\n    this.unsubscribe();\r\n  }\r\n\r\n  _addHeader(header: SidebarHeaderComponent): void {\r\n    if (this._headersLength > 0) {\r\n      throw new Error('<ng-sidebar-header> must be only one.');\r\n    }\r\n\r\n    this._headers.push(header);\r\n    this.subscribe(header);\r\n  }\r\n\r\n  _removeHeader(header: SidebarHeaderComponent): void {\r\n    const index = this._headers.indexOf(header);\r\n    if (index !== -1) {\r\n      this._headers.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  _addContent(content: SidebarContentComponent): void {\r\n    if (this._contentsLength > 0) {\r\n      throw new Error('<ng-sidebar-content> must be only one.');\r\n    }\r\n\r\n    this._contents.push(content);\r\n  }\r\n\r\n  _removeContent(content: SidebarContentComponent): void {\r\n    const index = this._contents.indexOf(content);\r\n    if (index !== -1) {\r\n      this._contents.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  open(): void {\r\n    this.opened = true;\r\n  }\r\n\r\n  close(): void {\r\n    this.opened = false;\r\n  }\r\n\r\n  private subscribe(header: SidebarHeaderComponent): void {\r\n    header.clicked.subscribe(() => {\r\n      this.headerClicked.emit(this);\r\n    });\r\n\r\n    header.touchMoved.subscribe(e => {\r\n      this.headerTouchMoved.emit({sender: this, originalEvent: e});\r\n    });\r\n\r\n    header.touchEnded.subscribe(e => {\r\n      this.headerTouchEnded.emit({sender: this, originalEvent: e});\r\n    });\r\n  }\r\n\r\n  private unsubscribe(): void {\r\n    this._headers.forEach(header => {\r\n      header.clicked.unsubscribe();\r\n      header.touchMoved.unsubscribe();\r\n      header.touchEnded.unsubscribe();\r\n    });\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  HostBinding,\r\n  HostListener,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output\r\n} from '@angular/core';\r\nimport {SidebarComponent} from './sidebar.component';\r\n\r\n@Component({\r\n  selector: 'ng-sidebar-header',\r\n  template: `\r\n    <div class=\"ng-sidebar-header__content\">\r\n      <div class=\"ng-sidebar-header__wrapper\">\r\n        <ng-content></ng-content>\r\n      </div>\r\n    </div>`,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SidebarHeaderComponent implements OnInit, OnDestroy {\r\n\r\n  @HostBinding('class.ng-sidebar-header') classNameSidebarHeader = true;\r\n  @Input() @HostBinding('class') className: string;\r\n\r\n  @Output() clicked = new EventEmitter<MouseEvent>();\r\n  @Output() touchMoved = new EventEmitter<TouchEvent>();\r\n  @Output() touchEnded = new EventEmitter<TouchEvent>();\r\n\r\n  constructor(@Optional() private _container: SidebarComponent) {\r\n    if (!this._container) {\r\n      throw new Error('<ng-sidebar-header> must be inside a <ng-sidebar></ng-sidebar>.');\r\n    }\r\n  }\r\n\r\n  @HostListener('click', ['$event']) onHeaderClick(e) {\r\n    this.clicked.emit(e);\r\n  }\r\n\r\n  @HostListener('touchmove', ['$event']) onHeaderTouchMove(e: TouchEvent) {\r\n    e.preventDefault();\r\n    this.touchMoved.emit(e);\r\n  }\r\n\r\n  @HostListener('touchend', ['$event']) onHeaderTouchEnd(e: TouchEvent) {\r\n    e.preventDefault();\r\n    this.touchEnded.emit(e);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this._container._addHeader(this);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._container._removeHeader(this);\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  HostBinding,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional\r\n} from '@angular/core';\r\nimport {SidebarComponent} from \"./sidebar.component\";\r\n\r\n@Component({\r\n  selector: 'ng-sidebar-content',\r\n  template: `\r\n    <ng-content></ng-content>`,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SidebarContentComponent implements OnInit, OnDestroy {\r\n\r\n  @HostBinding('class.ng-sidebar-content') classNameSidebarContent = true;\r\n  @Input() @HostBinding('class') className: string;\r\n\r\n  constructor(@Optional() private _container: SidebarComponent, public element: ElementRef) {\r\n    if (!this._container) {\r\n      throw new Error('<ng-sidebar-content> must be inside a <ng-sidebar></ng-sidebar>.');\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this._container._addContent(this);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._container._removeContent(this);\r\n  }\r\n}\r\n","import {ChangeDetectionStrategy, Component, HostBinding, Input, Optional} from '@angular/core';\r\nimport {SidebarAccordionComponent} from \"./sidebar-accordion/sidebar-accordion.component\";\r\n\r\n@Component({\r\n  selector: 'ng-sidebar-accordion-content',\r\n  template: `\r\n    <ng-content></ng-content>`,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SidebarAccordionContentComponent {\r\n\r\n  @HostBinding('class.ng-sidebar-accordion-content') classNameSidebarAccordionContent = true;\r\n  @Input() @HostBinding('class') className: string;\r\n\r\n  constructor(@Optional() private _container: SidebarAccordionComponent) {\r\n    if (!this._container) {\r\n      throw new Error('<ng-sidebar-accordion-content> must be inside a <ng-sidebar-accordion></ng-sidebar-accordion>.');\r\n    }\r\n  }\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {SidebarComponent} from './sidebar.component';\r\nimport {CommonModule} from '@angular/common';\r\nimport {SidebarHeaderComponent} from './sidebar-header.component';\r\nimport {SidebarAccordionComponent} from './sidebar-accordion/sidebar-accordion.component';\r\nimport {SidebarContentComponent} from './sidebar-content.component';\r\nimport {SidebarAccordionContentComponent} from './sidebar-accordion-content.component';\r\nimport { SidebarSettingsComponent } from './sidebar-settings.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    SidebarHeaderComponent,\r\n    SidebarContentComponent,\r\n    SidebarComponent,\r\n    SidebarAccordionContentComponent,\r\n    SidebarAccordionComponent,\r\n    SidebarSettingsComponent\r\n  ],\r\n  exports: [\r\n    SidebarHeaderComponent,\r\n    SidebarContentComponent,\r\n    SidebarComponent,\r\n    SidebarAccordionContentComponent,\r\n    SidebarAccordionComponent,\r\n    SidebarSettingsComponent\r\n  ]\r\n})\r\nexport class SidebarAccordionModule {\r\n}\r\n","import {SidebarComponent} from \"./sidebar.component\";\r\n\r\nexport class SidebarMouseTouchEventArgs {\r\n  sender: SidebarComponent;\r\n  originalEvent: TouchEvent;\r\n}\r\n"]}