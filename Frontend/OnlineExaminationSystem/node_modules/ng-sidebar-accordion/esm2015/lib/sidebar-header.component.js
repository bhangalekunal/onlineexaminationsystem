import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, HostListener, Input, Optional, Output } from '@angular/core';
import { SidebarComponent } from './sidebar.component';
export class SidebarHeaderComponent {
    constructor(_container) {
        this._container = _container;
        this.classNameSidebarHeader = true;
        this.clicked = new EventEmitter();
        this.touchMoved = new EventEmitter();
        this.touchEnded = new EventEmitter();
        if (!this._container) {
            throw new Error('<ng-sidebar-header> must be inside a <ng-sidebar></ng-sidebar>.');
        }
    }
    onHeaderClick(e) {
        this.clicked.emit(e);
    }
    onHeaderTouchMove(e) {
        e.preventDefault();
        this.touchMoved.emit(e);
    }
    onHeaderTouchEnd(e) {
        e.preventDefault();
        this.touchEnded.emit(e);
    }
    ngOnInit() {
        this._container._addHeader(this);
    }
    ngOnDestroy() {
        this._container._removeHeader(this);
    }
}
SidebarHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-sidebar-header',
                template: `
    <div class="ng-sidebar-header__content">
      <div class="ng-sidebar-header__wrapper">
        <ng-content></ng-content>
      </div>
    </div>`,
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
SidebarHeaderComponent.ctorParameters = () => [
    { type: SidebarComponent, decorators: [{ type: Optional }] }
];
SidebarHeaderComponent.propDecorators = {
    classNameSidebarHeader: [{ type: HostBinding, args: ['class.ng-sidebar-header',] }],
    className: [{ type: Input }, { type: HostBinding, args: ['class',] }],
    clicked: [{ type: Output }],
    touchMoved: [{ type: Output }],
    touchEnded: [{ type: Output }],
    onHeaderClick: [{ type: HostListener, args: ['click', ['$event'],] }],
    onHeaderTouchMove: [{ type: HostListener, args: ['touchmove', ['$event'],] }],
    onHeaderTouchEnd: [{ type: HostListener, args: ['touchend', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lkZWJhci1oZWFkZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctc2lkZWJhci1hY2NvcmRpb24vc3JjL2xpYi9zaWRlYmFyLWhlYWRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsWUFBWSxFQUNaLFdBQVcsRUFDWCxZQUFZLEVBQ1osS0FBSyxFQUdMLFFBQVEsRUFDUixNQUFNLEVBQ1AsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFZckQsTUFBTSxPQUFPLHNCQUFzQjtJQVNqQyxZQUFnQyxVQUE0QjtRQUE1QixlQUFVLEdBQVYsVUFBVSxDQUFrQjtRQVBwQiwyQkFBc0IsR0FBRyxJQUFJLENBQUM7UUFHNUQsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFjLENBQUM7UUFDekMsZUFBVSxHQUFHLElBQUksWUFBWSxFQUFjLENBQUM7UUFDNUMsZUFBVSxHQUFHLElBQUksWUFBWSxFQUFjLENBQUM7UUFHcEQsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDcEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxpRUFBaUUsQ0FBQyxDQUFDO1NBQ3BGO0lBQ0gsQ0FBQztJQUVrQyxhQUFhLENBQUMsQ0FBQztRQUNoRCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBRXNDLGlCQUFpQixDQUFDLENBQWE7UUFDcEUsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ25CLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFcUMsZ0JBQWdCLENBQUMsQ0FBYTtRQUNsRSxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RDLENBQUM7OztZQTdDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG1CQUFtQjtnQkFDN0IsUUFBUSxFQUFFOzs7OztXQUtEO2dCQUNULGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2FBQ2hEOzs7WUFYTyxnQkFBZ0IsdUJBcUJULFFBQVE7OztxQ0FQcEIsV0FBVyxTQUFDLHlCQUF5Qjt3QkFDckMsS0FBSyxZQUFJLFdBQVcsU0FBQyxPQUFPO3NCQUU1QixNQUFNO3lCQUNOLE1BQU07eUJBQ04sTUFBTTs0QkFRTixZQUFZLFNBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDO2dDQUloQyxZQUFZLFNBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxDQUFDOytCQUtwQyxZQUFZLFNBQUMsVUFBVSxFQUFFLENBQUMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcclxuICBDb21wb25lbnQsXHJcbiAgRXZlbnRFbWl0dGVyLFxyXG4gIEhvc3RCaW5kaW5nLFxyXG4gIEhvc3RMaXN0ZW5lcixcclxuICBJbnB1dCxcclxuICBPbkRlc3Ryb3ksXHJcbiAgT25Jbml0LFxyXG4gIE9wdGlvbmFsLFxyXG4gIE91dHB1dFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1NpZGViYXJDb21wb25lbnR9IGZyb20gJy4vc2lkZWJhci5jb21wb25lbnQnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICduZy1zaWRlYmFyLWhlYWRlcicsXHJcbiAgdGVtcGxhdGU6IGBcclxuICAgIDxkaXYgY2xhc3M9XCJuZy1zaWRlYmFyLWhlYWRlcl9fY29udGVudFwiPlxyXG4gICAgICA8ZGl2IGNsYXNzPVwibmctc2lkZWJhci1oZWFkZXJfX3dyYXBwZXJcIj5cclxuICAgICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+YCxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxyXG59KVxyXG5leHBvcnQgY2xhc3MgU2lkZWJhckhlYWRlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcclxuXHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5uZy1zaWRlYmFyLWhlYWRlcicpIGNsYXNzTmFtZVNpZGViYXJIZWFkZXIgPSB0cnVlO1xyXG4gIEBJbnB1dCgpIEBIb3N0QmluZGluZygnY2xhc3MnKSBjbGFzc05hbWU6IHN0cmluZztcclxuXHJcbiAgQE91dHB1dCgpIGNsaWNrZWQgPSBuZXcgRXZlbnRFbWl0dGVyPE1vdXNlRXZlbnQ+KCk7XHJcbiAgQE91dHB1dCgpIHRvdWNoTW92ZWQgPSBuZXcgRXZlbnRFbWl0dGVyPFRvdWNoRXZlbnQ+KCk7XHJcbiAgQE91dHB1dCgpIHRvdWNoRW5kZWQgPSBuZXcgRXZlbnRFbWl0dGVyPFRvdWNoRXZlbnQ+KCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIHByaXZhdGUgX2NvbnRhaW5lcjogU2lkZWJhckNvbXBvbmVudCkge1xyXG4gICAgaWYgKCF0aGlzLl9jb250YWluZXIpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCc8bmctc2lkZWJhci1oZWFkZXI+IG11c3QgYmUgaW5zaWRlIGEgPG5nLXNpZGViYXI+PC9uZy1zaWRlYmFyPi4nKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQnXSkgb25IZWFkZXJDbGljayhlKSB7XHJcbiAgICB0aGlzLmNsaWNrZWQuZW1pdChlKTtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ3RvdWNobW92ZScsIFsnJGV2ZW50J10pIG9uSGVhZGVyVG91Y2hNb3ZlKGU6IFRvdWNoRXZlbnQpIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIHRoaXMudG91Y2hNb3ZlZC5lbWl0KGUpO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcigndG91Y2hlbmQnLCBbJyRldmVudCddKSBvbkhlYWRlclRvdWNoRW5kKGU6IFRvdWNoRXZlbnQpIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIHRoaXMudG91Y2hFbmRlZC5lbWl0KGUpO1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICB0aGlzLl9jb250YWluZXIuX2FkZEhlYWRlcih0aGlzKTtcclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgdGhpcy5fY29udGFpbmVyLl9yZW1vdmVIZWFkZXIodGhpcyk7XHJcbiAgfVxyXG59XHJcbiJdfQ==