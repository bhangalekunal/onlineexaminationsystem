import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Optional, Output } from '@angular/core';
import { SidebarAccordionComponent } from './sidebar-accordion/sidebar-accordion.component';
export class SidebarComponent {
    constructor(_container) {
        this._container = _container;
        this.classNameSidebar = true;
        this.headerClicked = new EventEmitter();
        this.headerTouchMoved = new EventEmitter();
        this.headerTouchEnded = new EventEmitter();
        this.openedChange = new EventEmitter();
        this.classNameSidebarOpened = false;
        this._headers = [];
        this._contents = [];
        this._opened = false;
        if (!this._container) {
            throw new Error('<ng-sidebar-accordion> must be inside a <ng-sidebar-accordion></ng-sidebar-accordion>.');
        }
    }
    get opened() {
        return this._opened;
    }
    ;
    set opened(value) {
        if (this._opened !== value) {
            this._opened = value;
            this.classNameSidebarOpened = value;
            this.openedChange.emit({ sender: this, opened: value });
        }
    }
    get _headersLength() {
        return this._headers.length;
    }
    get _contentsLength() {
        return this._contents.length;
    }
    ngOnInit() {
        this._container._addSidebar(this);
    }
    ngOnDestroy() {
        this._container._removeSidebar(this);
        this.unsubscribe();
    }
    _addHeader(header) {
        if (this._headersLength > 0) {
            throw new Error('<ng-sidebar-header> must be only one.');
        }
        this._headers.push(header);
        this.subscribe(header);
    }
    _removeHeader(header) {
        const index = this._headers.indexOf(header);
        if (index !== -1) {
            this._headers.splice(index, 1);
        }
    }
    _addContent(content) {
        if (this._contentsLength > 0) {
            throw new Error('<ng-sidebar-content> must be only one.');
        }
        this._contents.push(content);
    }
    _removeContent(content) {
        const index = this._contents.indexOf(content);
        if (index !== -1) {
            this._contents.splice(index, 1);
        }
    }
    open() {
        this.opened = true;
    }
    close() {
        this.opened = false;
    }
    subscribe(header) {
        header.clicked.subscribe(() => {
            this.headerClicked.emit(this);
        });
        header.touchMoved.subscribe(e => {
            this.headerTouchMoved.emit({ sender: this, originalEvent: e });
        });
        header.touchEnded.subscribe(e => {
            this.headerTouchEnded.emit({ sender: this, originalEvent: e });
        });
    }
    unsubscribe() {
        this._headers.forEach(header => {
            header.clicked.unsubscribe();
            header.touchMoved.unsubscribe();
            header.touchEnded.unsubscribe();
        });
    }
}
SidebarComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-sidebar',
                template: `
    <ng-content select="ng-sidebar-header, [ng-sidebar-header]"></ng-content>
    <ng-content select="ng-sidebar-content, [ng-sidebar-content]"></ng-content>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
SidebarComponent.ctorParameters = () => [
    { type: SidebarAccordionComponent, decorators: [{ type: Optional }] }
];
SidebarComponent.propDecorators = {
    position: [{ type: Input }, { type: HostBinding, args: ['attr.position',] }],
    classNameSidebar: [{ type: Input }, { type: HostBinding, args: ['class.ng-sidebar',] }],
    className: [{ type: Input }, { type: HostBinding, args: ['class',] }],
    style: [{ type: Input }, { type: HostBinding, args: ['style',] }],
    headerClicked: [{ type: Output }],
    headerTouchMoved: [{ type: Output }],
    headerTouchEnded: [{ type: Output }],
    openedChange: [{ type: Output }],
    classNameSidebarOpened: [{ type: HostBinding, args: ['class.ng-sidebar_opened',] }],
    opened: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,